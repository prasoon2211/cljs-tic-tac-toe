{"version":3,"sources":["tic_tac_toe/core.cljs"],"mappings":"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","names":["js/tic-tac-toe","js/tic-tac-toe.core","js/tic-tac-toe.core.app-state","tic-tac-toe.core/app-state","reagent.core.atom","cljs.core/vec","cljs.core.repeat","tic-tac-toe.core/current-squares","cljs.core/deref","cljs.core.get_in","tic-tac-toe.core/current-next-player","tic-tac-toe.core/get-winner","squares","lines","cljs.core/first","cljs.core.take","iter__4529__auto__","s__35460","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__35462","cljs.core/chunk-buffer","i__35461","cljs.core/-nth","vec__35463","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35459","cljs.core/chunk-rest","vec__35466","cljs.core/cons","cljs.core/rest","line","a","b","c","res","and__4115__auto__","cljs.core._EQ_","tic-tac-toe.core/handle-click!","i","history","current-index","next-player","updated-squares","cljs.core.assoc","updated-next-player","new-state","p1__35469#","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.conj","cljs.core.subvec","cljs.core/assoc-in","tic-tac-toe.core/square","click-handler","square-value","tic-tac-toe.core/render-square","tic-tac-toe.core/board","tic-tac-toe.core/get-status","temp__5733__auto__","winner","tic-tac-toe.core/moves","s__35471","b__35473","i__35472","vec__35474","iter__35470","vec__35477","idx","state","cljs.core.map_indexed","cljs.core/vector","tic-tac-toe.core/game","props","tic-tac-toe.core/mount","el","reagent.dom.render","tic-tac-toe.core/mount-app-element","goog.dom/getElement","tic-tac-toe.core/main","cljs.core.println","cljs.core/chunk-first"],"sourcesContent":["(ns tic-tac-toe.core\n  (:require\n   [goog.dom :as gdom]\n   [reagent.core :as reagent :refer [atom]]\n   [reagent.dom :as rd]))\n\n(defonce app-state (atom {:history [{:squares (vec (repeat 9 nil))\n                                     :next-player \"X\"}]\n                          :current-index 0}))\n\n(defn current-squares []\n  (get-in @app-state [:history (:current-index @app-state) :squares]))\n\n(defn current-next-player []\n  (get-in @app-state [:history (:current-index @app-state) :next-player]))\n\n\n(defn get-winner [squares]\n  (let [lines [[0, 1, 2]\n               [3, 4, 5]\n               [6, 7, 8]\n               [0, 3, 6]\n               [1, 4, 7]\n               [2, 5, 8]\n               [0, 4, 8]\n               [2, 4, 6]]]\n    (first (take 1 (for [line lines\n                         :let [[a b c] line\n                               res (if (and\n                                        (nth squares a)\n                                        (= (nth squares a) (nth squares b))\n                                        (= (nth squares a) (nth squares c)))\n                                     (nth squares a))]\n                         :when (some? res)]\n                     res)))))\n\n(defn handle-click! [i]\n  (when-not (get-winner (current-squares))\n    (let [history (:history @app-state)\n          current-index (:current-index @app-state)\n          next-player (current-next-player)\n          updated-squares (assoc (current-squares) i next-player)\n          updated-next-player (if (= \"X\" next-player) \"O\" \"X\")\n          new-state {:squares updated-squares\n                     :next-player updated-next-player}]\n      (swap! app-state update-in [:history]\n             #(conj (subvec %1 0 (inc current-index)) new-state))\n      (swap! app-state assoc-in [:current-index] (inc current-index)))))\n\n(defn square [click-handler square-value]\n  [:button\n   {:class \"square\"\n    :on-click click-handler}\n   square-value])\n\n(defn render-square [i]\n  [square (fn [] (handle-click! i)) (nth (current-squares) i)])\n\n(defn board []\n  [:div\n   [:div.board-row\n    [render-square 0]\n    [render-square 1]\n    [render-square 2]]\n   [:div.board-row\n    [render-square 3]\n    [render-square 4]\n    [render-square 5]]\n   [:div.board-row\n    [render-square 6]\n    [render-square 7]\n    [render-square 8]]])\n\n\n(defn get-status []\n  (if-let [winner (get-winner (current-squares))]\n    (str \"Winner: \" winner)\n    (str \"Next turn: \" (current-next-player))))\n\n\n(defn moves []\n  (let [history (:history @app-state)]\n    (for [[idx state] (map-indexed vector history)]\n      ^{:key idx} [:li\n                   [:button\n                    {:on-click #(swap! app-state assoc-in [:current-index] idx)}\n                    (if (zero? idx)\n                      \"Go to game start\"\n                      (str \"Go to move #: \" idx))]])))\n\n(defn game [props]\n  [:div.game\n   [:div.game-board\n    [board]]\n   [:div.game-info\n    [:div (get-status)]\n    [:ol (moves)]]])\n\n(defn mount [el]\n  (rd/render [game] el))\n\n(defn mount-app-element []\n  (when-let [el (gdom/getElement \"app\")]\n    (mount el)))\n\n;; (defn ^:dev/before-load stop []\n;;   (js/console.log \"stop!\"))\n;; (defn ^:dev/after-load start []\n;;   (js/console.log \"start!\")\n;;   (mount-app-element))\n\n(defn ^:export main []\n  (mount-app-element)  \n  (println \"[main] : loading\"))\n"]}